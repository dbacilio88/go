// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/task/task.go

// Package mock_task is a generated GoMock package.
package mock_task

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tasks "github.com/madflojo/tasks"
)

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExecutor) Create() *tasks.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(*tasks.Scheduler)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExecutorMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExecutor)(nil).Create))
}

// Run mocks base method.
func (m *MockExecutor) Run(exec *tasks.Scheduler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", exec)
}

// Run indicates an expected call of Run.
func (mr *MockExecutorMockRecorder) Run(exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockExecutor)(nil).Run), exec)
}
